#!/usr/bin/python
# -*- coding: utf-8 -*-

from common import prutils
from collections import OrderedDict

_DevClass = {
    "HAND_HELD_TRANSMITTERS" : '\x01',
    "DETECTORS" :"\x03",
    "SIRENS"    :"\x02",
    "KEYPADS"   :"\x04",
    "KEYFOBS"   :"\x05",
    "REPEATERS" :"\x00"}

_DeviceNames =  [
    "CONTACT",
    "CONTACT_AUX",
    "MOTION_SENSOR",
    "MOTION_CAMERA",
    "SMOKE",
    "SMOKE_HEAT",
    "GAS",
    "CO",
    "FLOOD",
    "TEMPERATURE",
    "SMOKE_HEAT_TEMP",
    "SHOCK",
    "SHOCK_AUX",
    "SHOCK_CONTACT",
    "SHOCK_AUX_CONTACT",
    "SHOCK_AUX_CONTACT_G2",
    "TOWER30",
    "TOWER32",
    "TOWER20",
    "OUTDOOR_SIREN",
    "INDOOR_SIREN",
    "KEYFOB",
    "KEYFOB_235",
    "KEYFOB_LCD",
    "PGX929",
    "PGX939",
    "REPEATER",
    "KP_140",
    "KP_141",
    "KP_160_STATION",
    "KP_250",
    "CLIP",
    "GLASS_BREAK",
    "WIRED_ZONE",
    "VANISHING",
    "FLOOD_551",
    "WRIST_PANIC_101",
    "PENDENT_PANIC_101",
    "PANIC_102"
]
# corresponding index for device name, be careful with order
CONTACT,\
CONTACT_AUX,\
MOTION_SENSOR,\
MOTION_CAMERA,\
SMOKE,\
SMOKE_HEAT,\
GAS,\
CO,\
FLOOD,\
TEMPERATURE,\
SMOKE_HEAT_TEMP,\
SHOCK,\
SHOCK_AUX,\
SHOCK_CONTACT,\
SHOCK_AUX_CONTACT,\
SHOCK_AUX_CONTACT_G2,\
TOWER30,\
TOWER32,\
TOWER20,\
OUTDOOR_SIREN,\
INDOOR_SIREN,\
KEYFOB,\
KEYFOB_235,\
KEYFOB_LCD,\
PGX929,\
PGX939,\
REPEATER,\
KP_140,\
KP_141,\
KP_160_STATION,\
KP_250,\
CLIP,\
GLASS_BREAK,\
WIRED_ZONE,\
VANISHING,\
FLOOD_551,\
WRIST_PANIC_101,\
PENDENT_PANIC_101,\
PANIC_102 = range(len(_DeviceNames))

_DeviceType = {_DeviceNames[CONTACT]:     _DevClass["DETECTORS"]  +'\x29',
                _DeviceNames[CONTACT_AUX]:       _DevClass["DETECTORS"]  +'\x2A',
                _DeviceNames[MOTION_SENSOR]:     _DevClass["DETECTORS"]  +'\x01',
                _DeviceNames[MOTION_CAMERA]:     _DevClass["DETECTORS"]  +'\x04',
                _DeviceNames[SMOKE]:             _DevClass["DETECTORS"]  +'\x15',
                _DeviceNames[SMOKE_HEAT]:        _DevClass["DETECTORS"]  +'\x16',
                _DeviceNames[GAS]:               _DevClass["DETECTORS"]  +'\x17',
                _DeviceNames[CO]:                _DevClass["DETECTORS"]  +'\x18',
                _DeviceNames[FLOOD]:             _DevClass["DETECTORS"]  +'\x19',
                _DeviceNames[TEMPERATURE]:       _DevClass["DETECTORS"]  +'\x1A',
                _DeviceNames[SMOKE_HEAT_TEMP]:   _DevClass["DETECTORS"]  +'\x1B',
                _DeviceNames[SHOCK]:             _DevClass["DETECTORS"]  +'\x2A', # panle don't know the different so the panel , act as it was contact aux
                _DeviceNames[SHOCK_AUX]:         _DevClass["DETECTORS"]  +'\x33',
                _DeviceNames[SHOCK_CONTACT]:     _DevClass["DETECTORS"]  +'\x34',
                _DeviceNames[SHOCK_AUX_CONTACT]: _DevClass["DETECTORS"]  +'\x35',
                _DeviceNames[SHOCK_AUX_CONTACT_G2]: _DevClass["DETECTORS"]  +'\x36',
                _DeviceNames[TOWER30]:           _DevClass["DETECTORS"]  +'\x06',
                _DeviceNames[TOWER32]:           _DevClass["DETECTORS"]  +'\x07',
                _DeviceNames[TOWER20]:           _DevClass["DETECTORS"]  +'\x08',
                _DeviceNames[OUTDOOR_SIREN]:     _DevClass["SIRENS"]     +'\x01',
                _DeviceNames[INDOOR_SIREN]:      _DevClass["SIRENS"]     +'\x02',
                _DeviceNames[KEYFOB]:            _DevClass["KEYFOBS"]    +'\x01',
                _DeviceNames[KEYFOB_235]:        _DevClass["KEYFOBS"]    +'\x02',
                _DeviceNames[KEYFOB_LCD]:        _DevClass["KEYFOBS"]    +'\x03',
                _DeviceNames[PGX929]:            _DevClass["KEYFOBS"]    +'\x05',
                _DeviceNames[PGX939]:            _DevClass["KEYFOBS"]    +'\x04',
                _DeviceNames[REPEATER]:          _DevClass["REPEATERS"]  +'\x01',
                _DeviceNames[KP_140]:            _DevClass["KEYPADS"]    +'\x01',
                _DeviceNames[KP_141]:            _DevClass["KEYPADS"]    +'\x02',
                _DeviceNames[KP_160_STATION]:    _DevClass["KEYPADS"]    +'\x05',
                _DeviceNames[KP_250]:            _DevClass["KEYPADS"]    +'\x06',
                _DeviceNames[CLIP]:              _DevClass["DETECTORS"]  +'\x03',
                _DeviceNames[GLASS_BREAK]:       _DevClass["DETECTORS"]  +'\x05',
                _DeviceNames[WIRED_ZONE]:        _DevClass["DETECTORS"]  +'\xFE',
                _DeviceNames[VANISHING]:         _DevClass["DETECTORS"]  +'\x2D',
                _DeviceNames[FLOOD_551]:         _DevClass["DETECTORS"]  +'\x1C',
                _DeviceNames[WRIST_PANIC_101]:   _DevClass["HAND_HELD_TRANSMITTERS"]  +'\x02',
                _DeviceNames[PENDENT_PANIC_101]: _DevClass["HAND_HELD_TRANSMITTERS"]  +'\x01',
                _DeviceNames[PANIC_102]:         _DevClass["HAND_HELD_TRANSMITTERS"]  +'\x03'
}

# see PowerG Configuration doc
# no need to calc integrity code for indirect settings
_DeviceConfigGroups = {
    _DeviceType[_DeviceNames[CONTACT]]:     [0x0001], # ok
    _DeviceType[_DeviceNames[CONTACT_AUX]]:  [0x0001, 0x001B], # ok
    _DeviceType[_DeviceNames[MOTION_SENSOR]]:[0x0001, 0x0002, 0x0003, 0x0004, 0x0014, 0x0018, 0x0050],   # ok
    _DeviceType[_DeviceNames[MOTION_CAMERA]]:[0x0001, 0x0002, 0x0003,\
     0x0004,
     0x000A, 0x000B, 0x000C, 0x000E,\
                0x000F, 0x0010, 0x0014, 0x0018, 0x0019, 0x0045, 0x0046, 0x0047, 0x0048, 0x0049, 0x004A, 0x004D,\
                0x004E, 0x0050],   
    _DeviceType[_DeviceNames[SMOKE]]:        [], # [0x0005, 0x0006, 0x0007, 0x0008],
    _DeviceType[_DeviceNames[SMOKE_HEAT]]:   [], #[0x0005, 0x0006, 0x0007, 0x0008],  
    _DeviceType[_DeviceNames[GAS]]:          [],
    _DeviceType[_DeviceNames[CO]]:           [],
    _DeviceType[_DeviceNames[FLOOD]]:        [], # 0x0001 - removed, Ofer
    _DeviceType[_DeviceNames[TEMPERATURE]]: [], # 0x0001 - removed, Ofer
    _DeviceType[_DeviceNames[SMOKE_HEAT_TEMP]]: [0x0041],
    _DeviceType[_DeviceNames[SHOCK]]:        [0x0001, 0x001B],
    _DeviceType[_DeviceNames[SHOCK_AUX]]:    [0x01, 0x001F, 0x003E, 0x0040, 0x004F],
    _DeviceType[_DeviceNames[SHOCK_CONTACT]]:[0x01, 0x001F, 0x003E, 0x003F, 0x004F],  
    _DeviceType[_DeviceNames[SHOCK_AUX_CONTACT]]:[0x01, 0x001F, 0x003E, 0x003F, 0x0040, 0x004F],
    _DeviceType[_DeviceNames[SHOCK_AUX_CONTACT_G2]]:[0x01, 0x001F, 0x003E, 0x004F],
    _DeviceType[_DeviceNames[TOWER30]]: [0x0001, 0x0003, 0x0004, 0x0014, 0x0018, 0x001D, 0x0050],   
    _DeviceType[_DeviceNames[TOWER32]]: [0x0001, 0x0003, 0x0004, 0x0011, 0x0014, 0x0015, 0x0018, 0x001D, 0x001E, 0x0050, 0x0051],
    _DeviceType[_DeviceNames[TOWER20]]: [0x0001, 0x0004, 0x000D, 0x0014, 0x0017, 0x0018, 0x0044], # BUG?
    _DeviceType[_DeviceNames[OUTDOOR_SIREN]]:[0x0026, 0x0028, 0x0029],
    _DeviceType[_DeviceNames[INDOOR_SIREN]]: [0x0026, 0x0028, 0x0029],
    _DeviceType[_DeviceNames[KEYFOB]]:       [], 
    _DeviceType[_DeviceNames[KEYFOB_235]]:   [], 
    _DeviceType[_DeviceNames[KEYFOB_LCD]]:   [], 
    _DeviceType[_DeviceNames[PGX929]]: [],
    _DeviceType[_DeviceNames[PGX939]]: [],
    _DeviceType[_DeviceNames[REPEATER]]: [],     
    _DeviceType[_DeviceNames[KP_140]]:  [0x0025, 0x002D, 0x0032], 
    _DeviceType[_DeviceNames[KP_141]]:  [0x0025, 0x002D, 0x0032], # BUG? + 0x0009, 0x002f
    _DeviceType[_DeviceNames[KP_160_STATION]]:[0x0009, 0x0025, 0x002D, 0x002F, 0x0032], # BUG?
    _DeviceType[_DeviceNames[KP_250]]: [], 
    _DeviceType[_DeviceNames[CLIP]]: [0x0001, 0x0002, 0x0004, 0x0014, 0x0018, 0x0050],
    _DeviceType[_DeviceNames[GLASS_BREAK]]: [], # 0x0001 - removed, Ofer
    _DeviceType[_DeviceNames[WIRED_ZONE]]: [],
    _DeviceType[_DeviceNames[VANISHING]]: [],
    _DeviceType[_DeviceNames[FLOOD_551]]: [],
    _DeviceType[_DeviceNames[WRIST_PANIC_101]]: [],
    _DeviceType[_DeviceNames[PENDENT_PANIC_101]]: [],
    _DeviceType[_DeviceNames[PANIC_102]]: []
}

# PowerG Device Configuration document

# record format:
# name : [setting code, dpr tldv type, (offset in tldv, size)]
DEVICE_CONFIG_TYPE = {
     

    "alarm_led_activation" :                [0x0001, 0x6E],
    "detection_range" :                     [0x0002, 0x6F],
    "detection_event_counter" :             [0x0003, 0x70],
    "unset_activity_timer" :                [0x0004, 0x7C],
    "burglar_siren" :                       [0x0005, 170, (0x00, 1)], # difference in value !?
    "fire_siren" :                          [0x0006, 170, (0x00, 1)],
    "gas_co_siren" :                        [0x0007, 170, (0x00, 1)],
    "flood_siren" :                         [0x0008, 170, (0x00, 1)],
    "ac_power" :                            [0x0009, 0x6D],
    "image_brightness" :                    [0x000A, 0xBF, (0x05, 1)],
    "image_contrast" :                      [0x000B, 0xBF, (0x06, 1)],
    "microphone" :                          [0x000C, 0xC0, (0x00, 1)],
    "detection_sensitivity" :               [0x000D, 0x68],
    "alarm_mask" :                          [0x000E, 196],
    "image_color" :                         [0x000F, 0xBF, (0x02, 1)],
    "image_resolution" :                    [0x0010, 0xBF, (0x01, 1)],
    "anti_masking_microwave" :              [0x0011, 0x6A],
    "set_activity_timer" :                  [0x0014, 0x7D],
    "detection_range_microwave" :           [0x0015, 0x6B],
    "show_locally_link_quality" :           [0x0016, 0x7B],
    "24h_night" :                           [0x0017, 0x69],
    "activity_timer_notification" :         [0x0018, 0x7E],
    "image_quality" :                       [0x0019, 0xBF, (0x03, 1)],
    "external_input_contact_detector" :     [0x001B, 0x72],
    "shock_continous_mode" :                [0x001F, 103, (0x01, 1)],
    "anti_masking_range" :                  [0x001D, 0x73],
    "anti_cloak" :                          [0x001E, 0x6C],
    "strobe_alarm" :                        [0x0022, 170],
    "exit_entry_beeps" :                    [0x0023, 0],
    "squawk" :                              [0x0024, 170],
    "sounder_volume" :                      [0x0025, 0x60],
    "activity_led" :                        [0x0026, 0x88],
    "smash_alarm" :                         [0x0027, 0],
    "auto_tamper_alarm" :                   [0x0028, 0x81],
    "siren_pattern" :                       [0x0029, 0x79],
    "tamper_configuration" :                [0x002D, 0x8A],
    "supervision" :                         [0x002E, 0x74],
    "trouble_memory_indication" :           [0x002F, 0x89],
    "multifunction_key" :                   [0x0030, 0],
    "screen_saver" :                        [0x0032, 0x8B],
    "very_hot_temperature_threshold" :      [0x0033, 26], # difference in value !?
    "cold_temperature_threshold" :          [0x0035, 26],
    "freezing_temperature_threshold" :      [0x0037, 26],
    "freezer_alert" :                       [0x0038, 0],
    "trouble_beeps" :                       [0x003B, 0x4E],
    "reed_switch" :                         [0x003E, 101],
    "anty-masking" :                        [0x003F, 99],
    "shock-external-input" :                [0x40, 114],
    "smoke_heat" :                          [0x0041, 0x86],
    "anti_masking_outdoor_detector" :       [0x0044, 0x63],
    "microphone_audio_gain" :               [0x0045, 192, (0x02, 1)],
    "ir_led" :                              [0x0046, 0xBE],
    "frame_rate" :                          [0x0047, 0xBF, (0x00, 1)],
    "audio_resolution" :                    [0x0048, 0xC0, (0x01, 1)],
    "pre_alarm_length" :                    [0x0049, 0xC1],
    "post_alarm_length" :                   [0x004A, 0xC2], 
    "auto_mode" :                           [0x004D, 0xC5],
    "flicker" :                             [0x004E, 0xBF, (0x04, 1)],
    "presence_detection" :                  [0x0050, 0x80],
    "temperature_report" :                  [0x0051, 0x7F],
    "shock_sensivity_level" :               [0x04F, 103, (0x00, 1)]
}

class Config:
    #Enable / Disable
    DISABLE = 0
    ENABLE = 1
    TOGGLE = 2
    DIM = 3

    #Result
    SUCCESS = 0
    FAIL = 1
    DATA_NOT_VALID = 2
    WRONG_USER_CODE = 3
    TLDV_NOT_VALID = 4
    MCODE_NOT_VALID = 5

    #Detection Event
    CLOSE = 0
    OPEN = 1
    VIOLATED = 2

    #MCODE (Message type)
    GET = 2
    REPLY = 3
    SET = 4
    REPORT = 5
    RESPONSE = 6
    CONFIRM = 7
    REMOVE_DEVICE = 8
    FILE_REQUEST = 9
    FILE_REPLY = 10
    SPECIAL_SET = 11
    SPECIAL_RESPONSE = 12

    #Utilitary
    NO_VALUE = 0

# FAKE IMAGE FOR VIRTUAL CAMERA
FAKE_IMAGE = '\xFF\xD8\xFF\xE0\x00\x10\x4A\x46\x49\x46\x00\x01\x01\x01\x00\x48\x00\x48\x00\x00\xFF\xDB\x00\x43\x00\x05\x03\x04\x04\x04\x03\x05\x04\x04\x04\x05\x05\x05\x06\x07\x0C\x08\x07\x07\x07\x07\x0F\x0B\x0B\x09\x0C\x11\x0F\x12\x12\x11\x0F\x11\x11\x13\x16\x1C\x17\x13\x14\x1A\x15\x11\x11\x18\x21\x18\x1A\x1D\x1D\x1F\x1F\x1F\x13\x17\x22\x24\x22\x1E\x24\x1C\x1E\x1F\x1E\xFF\xDB\x00\x43\x01\x05\x05\x05\x07\x06\x07\x0E\x08\x08\x0E\x1E\x14\x11\x14\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\xFF\xC0\x00\x11\x08\x00\xF0\x01\x40\x03\x01\x22\x00\x02\x11\x01\x03\x11\x01\xFF\xC4\x00\x1B\x00\x01\x01\x00\x03\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x03\x04\x06\x02\x07\x01\xFF\xC4\x00\x47\x10\x00\x01\x04\x02\x01\x03\x02\x02\x03\x0B\x08\x08\x07\x00\x00\x00\x00\x01\x02\x03\x04\x05\x06\x11\x07\x12\x21\x13\x31\x41\x51\x14\x22\x61\x15\x16\x17\x32\x33\x37\x71\x75\x96\xB3\xD4\x23\x34\x55\x56\x72\x76\x81\xB5\x42\x52\x57\x62\x91\x95\xD2\xD3\x08\x36\x38\x73\xB4\xC4\xC6\xFF\xC4\x00\x1A\x01\x01\x01\x01\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x03\x05\x02\x06\x01\xFF\xC4\x00\x34\x11\x01\x00\x02\x02\x01\x01\x04\x04\x0E\x03\x01\x00\x00\x00\x00\x00\x00\x01\x02\x03\x04\x11\x12\x13\x21\x31\x41\x05\x14\x61\xF0\x22\x23\x32\x33\x34\x51\x52\x71\x81\x91\xA1\xB1\xC1\xD1\x15\xC2\xF1\xE1\xFF\xDA\x00\x0C\x03\x01\x00\x02\x11\x03\x11\x00\x3F\x00\xFB\x00\x00\xFA\xA7\xC1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x91\xBB\x65\x2C\x61\x34\xCC\xE6\x6A\xA3\x22\x7D\x8A\x18\xEB\x16\xA2\x6C\xA8\xAA\xC7\x3E\x38\xDC\xE4\x47\x22\x2A\x2F\x1C\xA2\x73\xC2\xA1\xD1\xFE\x0F\x37\x96\xC6\xC7\x49\xBF\x6A\xF1\xF7\x27\x29\xDD\xAC\xCC\x9F\xFD\xE2\x7C\xDB\x34\xC3\x31\x16\x57\xAF\xA5\x97\x62\x26\x69\xE4\xD3\x06\xDF\xE0\xFF\x00\x75\xFF\x00\x68\x5A\xA7\xEC\xD4\xDF\xC7\x0F\xC1\xFE\xEB\xFE\xD0\xB5\x4F\xD9\xA9\xBF\x8E\x32\xF5\xFC\x2A\x3F\xC4\xEC\xFD\x51\xF9\xB5\x01\x33\x25\x53\x63\xD7\x77\x6C\x66\x13\x2D\x9D\xC2\xE6\x2B\x64\x71\xB6\xED\x35\xF4\xB1\x92\x55\x7C\x4F\x82\x4A\xCC\x44\x55\x75\x89\x51\xC8\xA9\x3A\xFC\x13\x8E\xD4\x29\x94\xE2\xCB\x5C\xB5\xEA\xAA\x2C\xF8\x2F\x82\xFD\x17\xF1\x00\x06\x8C\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4D\xCD\x66\x6A\xE2\xDF\x5A\xB3\xA2\xB3\x72\xFD\xC7\x2B\x29\xD0\xA9\x12\xCB\x62\xCB\x91\x39\x54\x63\x13\xE0\x9E\x39\x72\xF0\xD6\xA2\xF2\xE5\x44\xF2\x6E\x41\x82\xEA\x8D\xB6\x7A\xD5\xF4\xDC\x2D\x38\x95\x39\x6C\x79\x2C\xFA\xC7\x3A\x7F\x69\xB0\xC1\x33\x13\xFC\x1E\xA6\x19\x36\x31\x63\x9E\x2D\x2A\xB0\xE9\xE7\xCD\x1D\x54\xAF\x30\xCC\x08\xD9\x8C\x8E\x77\x57\xED\x7E\xEF\xAC\xCD\x86\xA6\xE5\x46\xAE\x52\xBD\x96\xDB\xA0\xC7\x2A\xF0\x88\xF9\x11\x1A\xF8\xD1\x7C\x7D\x69\x23\x6B\x79\xF1\xDD\xCA\xA7\x36\x53\xCA\x72\x87\xBC\x79\x69\x92\x39\xAC\xF2\xCF\x36\x0C\x98\x67\x8C\x91\xC0\x00\x34\x62\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xE6\x7A\xAF\xF9\xAD\xDB\x3F\x52\x5C\xFD\xC3\xCE\x8F\xAF\x18\x7C\x46\x6F\xA8\x7A\x3D\x4C\xCE\x2E\x8E\x4A\xBB\x70\xF9\x69\x1B\x15\xBA\xED\x99\x88\xE4\x93\x1E\x88\xE4\x47\x22\xA7\x3C\x2A\xA7\x3F\x6A\x9C\xE7\x55\xFF\x00\x35\xBB\x67\xEA\x4B\x9F\xB8\x79\xD7\x75\xB1\x6D\x55\xDD\xF4\xEC\xAB\x71\x19\xAB\xD5\x21\xC5\x64\xE0\x96\x4C\x76\x2E\xC5\xCF\x4D\xEF\x92\x8A\xB1\x1C\x90\xB1\xCA\xDE\x52\x37\xF0\xAB\xC2\x2F\x6A\x9C\xDD\xA9\x88\xCF\x4E\xAF\x07\x67\x42\x2D\x3A\xB9\x62\xBE\x2E\x47\xF0\x7D\xA1\x7F\x52\x35\x9F\xF9\x54\x1F\xF4\x8F\xC1\xF6\x85\xFD\x48\xD6\x7F\xE5\x50\x7F\xD2\x6D\xFD\xF1\x37\xFA\xB5\xBA\xFE\xC9\xE4\xBF\xEC\x0F\xBE\x26\xFF\x00\x56\xB7\x5F\xD9\x3C\x97\xFD\x82\xAE\xD3\x07\xD7\x1F\xA2\x2E\xC7\x6F\xEC\xDB\xF5\x64\xC2\xEA\xDA\xCE\x12\xD3\xAD\xE1\x75\xCC\x3E\x32\xC3\xD8\xB1\xBA\x5A\x94\xA3\x85\xEE\x62\xAA\x2A\xB5\x55\xA8\x8B\xC7\x28\x8B\xC7\xD8\x86\xF2\xDF\xA2\x93\x7A\x2B\x76\xB7\xA9\xDD\xD9\xD9\xEA\xB7\xBB\xBB\x9E\x38\xE3\x9F\x7E\x7E\x06\x2C\x16\x5A\x9E\x6A\x87\xD3\x68\xAC\xFE\x92\x4B\x24\x2E\x6C\xF5\xDF\x0C\x8C\x92\x37\xAB\x1E\xC7\x31\xE8\x8E\x6B\x9A\xE6\xB9\x15\x15\x13\xCA\x11\x6A\xE9\x2D\xCC\xF4\x26\xDE\x4F\x5B\xD6\x70\xD6\xB6\xB6\x6D\xB6\x2C\x41\x6E\x78\x63\x8D\xFC\x45\x9D\x7B\x9C\xAF\x9B\x8E\xE4\x62\x46\xC5\xE7\x85\xE7\xB5\x15\x11\x17\xD8\xF1\x9F\x62\x30\xD6\x26\xB1\xDD\x2D\x35\x75\x2D\xB3\x7B\x56\xD3\xC4\xC2\xAE\x73\x61\xC0\x60\x96\x24\xCD\xE7\x31\x98\xBF\x5B\x9F\x4F\xE9\x96\xD9\x0F\x7F\x1E\xFC\x77\x2A\x72\x6F\x54\xB1\x5E\xDD\x58\x6D\xD4\x9E\x2B\x15\xE6\x63\x64\x8A\x58\x9E\x8E\x64\x8C\x72\x72\x8E\x6A\xA7\x85\x45\x45\x45\x45\x42\x16\x97\x9E\x83\x0B\x8F\x99\x74\x7D\x3E\x2D\x96\xC5\xB6\xF1\x7F\x6B\xCB\xDE\x4A\x4E\xCA\x49\xC7\xE5\x22\x46\xC5\x2B\xD6\x14\x55\x54\x63\x78\x63\x11\xBC\x76\x72\x8B\xCA\xEA\x60\x30\x59\x34\xC2\xE8\xFD\x39\x6D\xD7\x55\xB3\x6A\x18\x69\x64\x2D\xD3\x7A\xA3\xA2\xAF\x5E\xBF\x74\xEE\x89\xCA\x88\xA8\xAE\xF4\xD2\x24\x77\x85\x6F\xAA\x8E\x4E\x15\x0F\x34\xDA\xB4\xD6\x6F\x6A\xF1\x10\xF7\x93\x42\x91\x7A\xE3\xA5\xF9\xB4\xF8\xFB\x14\xB2\x1B\x66\x02\x96\x42\x4C\x6A\xDE\x75\xAC\x84\x5C\x7A\x94\xA8\xC1\x25\xBB\x2C\xE7\xD9\x5D\x14\x2D\x73\xD1\x3C\xFB\xAA\x18\x6C\x6E\x38\x7A\x8C\x59\x32\x10\x67\x31\xB0\xA2\x2A\xBA\x7C\x86\x0A\xED\x58\x58\x9F\x37\x49\x2C\x4D\x63\x53\xF4\xAA\x1D\x25\xDD\x9E\x7D\x76\xF5\xBD\x1F\xA5\x5A\xE6\x07\x1B\x47\x0C\xF6\xC3\x6E\xF5\xB8\xDE\xB0\x36\xC3\x9A\x8F\x74\x6C\x86\x35\x6B\xA5\x7F\x6B\x98\xAF\x91\xD2\x37\xCB\xFF\x00\xD2\x54\x77\x18\xBF\x08\x1D\x4E\xC4\x39\x6E\xE4\x69\xEA\xFB\x0D\x28\xD3\xBA\x6A\xD4\x2B\xCD\x42\xCF\x6A\x79\x55\x8D\xD2\x4B\x2B\x1E\xEE\x3D\x98\xEE\xC4\x5F\xF5\x90\xC6\x36\x76\x6D\x1D\x55\xA7\x77\xBF\xB5\x45\xB4\xB4\xA9\x6E\xCE\xF9\x27\xAB\xDF\xD9\xFC\xB1\x63\xEE\xD3\xC8\xD3\x8A\xED\x0B\x50\x5B\xAB\x33\x7B\xA3\x9A\x19\x11\xEC\x7A\x7C\xD1\xC9\xE1\x50\xC9\x34\xB1\x43\x1A\xC9\x34\x8C\x8D\x89\xEE\xE7\xB9\x11\x13\xFC\x54\xD4\xDC\xE9\x60\xF1\xF9\xFD\x4F\x75\xD4\x59\x1D\x7C\x56\xE6\xAE\x8E\xDC\x10\xB3\xB2\x2B\x12\x3E\xB3\xAC\xC3\x6B\xB7\xD9\xB2\x76\x44\xF6\xB9\x51\x39\x72\x3D\xBD\xDC\xF6\x21\x37\x7C\xAF\x05\xBC\x56\x3A\xAD\xA8\x23\x9E\xBC\xD9\xFC\x3C\x72\xC5\x23\x11\xCC\x7B\x57\x23\x59\x15\xAE\x45\xF0\xA8\xA8\xBC\x2A\x29\x4E\x3D\x9E\xD3\x0C\xE4\xE3\xC1\x1E\x6D\x2E\xCB\x62\xB8\x66\x7B\xA7\x8E\xFF\x00\xBE\x55\xD3\x21\x41\x60\x9A\x74\xBD\x5B\xD2\x81\x9D\xF3\x3F\xD5\x6F\x6C\x6D\xE1\x57\x97\x2F\x3E\x13\xC2\xF9\x5F\x92\x91\x99\xB9\xE1\x65\x81\x6C\xD5\x8B\x37\x72\xA7\xBA\x5C\xA9\x83\xBB\x3D\x67\x27\xFA\xCD\x9A\x38\x96\x37\x37\xED\x47\x2A\x7D\xA7\xEF\x55\xB4\xFC\x2E\xB1\xD5\x2A\x79\x4A\x38\x2C\x5D\xCA\x79\x2A\x10\x43\x43\x57\xA9\x13\x6B\x41\x6A\xDD\x69\x66\x7B\xAD\xDB\x56\xB3\xB5\x2B\xC4\xD9\x99\xF0\x72\xB9\xEE\x8F\xEA\xF2\xD6\x73\x6E\xC7\x51\x7A\x97\x82\x85\xF9\x6C\xA5\x1D\x6B\x37\x8D\xAE\xD5\x92\xD5\x1C\x65\x49\xEB\xDA\x48\xD1\x39\x77\xA4\xF7\xCB\x23\x65\x7A\x27\xB3\x15\xAC\xEE\xF6\xE5\xBC\x93\x46\xDE\x6C\x95\xEA\xA5\x3C\x16\xCF\xA3\xB5\xB1\x5F\xA7\x2E\x4E\xF9\xF0\xF7\xEF\x61\xC3\x65\x31\xB9\x9C\x7C\x79\x0C\x4D\xEA\xD7\xAA\x4B\xCF\x64\xD5\xE4\x47\xB1\xDC\x2F\x0A\x9C\xA7\xC5\x17\xC2\xA7\xC0\x9A\xBB\x76\x11\xF6\x25\x82\x92\xE4\xB2\xAE\x85\xCA\xC9\x9D\x8A\xC5\xD9\xBC\xC8\xDC\x8B\xC2\xB5\xCF\x82\x37\xB5\xAE\x4F\x8B\x55\x79\x4F\x91\x6B\xAB\x1A\x96\xB1\x33\x1B\xD4\x88\xF3\xB2\xD1\xD5\xAF\x55\x64\xD9\xDA\x58\xE8\x95\x5F\x9C\x47\x76\x7D\x19\x22\x56\xAA\x2B\x64\x91\x5C\x91\x2A\xA7\xD6\x91\xAF\x6B\x79\x4E\x11\x53\x0D\x0D\xBB\xA9\x30\x63\xA0\x6E\x13\x0F\xA5\x6B\xF8\xF8\x23\x6B\x2A\xE1\x64\xAD\x34\xAB\x0C\x68\x9F\x56\x35\x9A\x29\x18\xC6\x2F\x1C\x27\xD5\x89\xC8\xDF\x87\x77\xC5\x5D\xCC\xB9\x63\xE2\xEB\xDF\xE6\xFC\xBF\xA3\x70\x60\x9F\x8E\xBF\x11\x3E\x1E\xFD\xED\x4C\x26\xC3\x87\xCC\xCF\x3D\x6A\x17\x11\xD6\xAB\xA2\x2C\xF5\x65\x8D\xD0\xD8\x87\x9F\x6E\xF8\x9E\x88\xF6\x73\xF6\xA2\x15\x4C\x3D\x40\xCA\x50\xDD\xBA\x37\x6F\xA8\x71\x63\x3E\xE6\x6C\xBA\x83\xA7\x9D\xEC\x57\x77\x4B\x59\xF5\xD7\x9B\x35\xBB\xD1\x13\xBE\x29\x62\x45\xE3\x94\x44\x73\x5F\x1B\xF8\x45\x44\xE3\xDD\x89\xA2\xAF\x04\x93\xCF\x23\x62\x8A\x36\xAB\xDE\xF7\x2F\x08\xD6\xA2\x72\xAA\xAB\xF2\xE0\xA3\x57\x62\x73\x44\xF5\x47\x13\x08\xF7\xB4\xE3\x5E\xD5\xE8\x9E\x62\x7C\x18\x72\x79\x0A\x18\xBA\x32\x5E\xC9\xDD\xAD\x4A\xA4\x49\xCC\x93\xD8\x95\x23\x63\x3C\xF1\xE5\xCA\xBC\x27\x92\x3B\x77\x0C\x53\xE1\x59\xE1\xA5\xB1\x58\xAE\x9E\xD6\x20\xD7\x6F\xCB\x0B\x93\xE6\x92\x36\x15\x6A\xA7\xDA\x8B\xC1\xB3\x88\x7E\x3B\x09\x86\xC5\xF5\x1B\x6A\xC3\xD8\xCC\xEC\x19\x99\x13\xEF\x57\x02\xA8\x88\xB5\x23\x56\x2B\x9A\xE5\x47\x7D\x58\xE5\x56\x27\xA9\x2C\xCE\xF3\x1A\x2F\xA6\xDE\x57\xC3\xEB\xBB\x74\xEA\xCC\x8F\x5B\x0D\x93\x49\xAC\xD5\x72\x39\x29\x2D\x1B\x53\x2A\x27\xC5\xBF\x48\xF5\x9B\xCA\xFF\x00\xBD\xE9\x27\xF6\x54\xC7\xD6\xB2\xE4\x99\xEC\x6B\xCC\x42\xAF\x50\xD7\xC3\x58\xF5\x8B\xF1\x33\xE5\x1F\xF2\x5A\x18\x3C\xDE\x1F\x39\x04\x93\xE1\xF2\x55\x6F\x32\x27\xFA\x72\xFA\x32\x23\x96\x37\xA7\xBB\x5C\x9E\xED\x77\xD8\xBC\x29\x40\xC1\x34\x14\x7A\xA0\x97\xEC\x54\xC6\x45\xA9\xF5\x3F\x0B\x0B\x5E\xD7\xF7\xA3\xE3\xB1\x1A\xF7\x7A\x68\xE9\x1A\x89\xF4\x8A\x8F\x56\xB9\xAB\xDC\x88\xE6\x2F\x2A\x88\xD7\x22\x2A\xEA\x6B\x39\x56\xE6\xB0\x75\xB2\x29\x03\xEB\x49\x22\x39\x93\x57\x93\xF1\xE0\x95\x8E\x56\x49\x13\xBF\xDE\x63\xDA\xE6\xAF\xDA\x86\xFA\xFB\x3D\xAF\x35\xB4\x71\x30\x97\x73\x4B\xB0\x88\xBD\x67\x9A\xCF\x9A\x90\x00\xA9\x03\x47\x4C\xC9\xC5\xAE\xE9\x1B\x47\x55\xA5\xA6\xCB\xF9\x5B\x99\x07\x61\xF1\x10\xBD\x78\x46\xC7\x1D\xAF\xA2\x43\x0F\x77\x9E\xD6\xC9\x67\xBE\x47\x39\x13\x9E\x1E\xDE\x79\xEC\x69\xA5\x26\x2B\x3D\x94\x7A\xDC\xD8\xB7\x8D\x9E\xD5\xE9\x39\x57\x26\x3F\x29\x36\x3A\xBC\x5C\xFF\x00\xA3\x1C\x55\xDC\xC4\xED\x4F\x82\xBD\x5E\xEF\x9B\x94\xD6\x66\xA3\x12\x54\xAF\x8F\x7E\x7B\x3B\x2E\x32\xBD\xC6\x5D\x8E\x83\xEC\xB7\xE8\xE9\x2B\x26\x49\x9A\xBD\xA8\xDE\x7F\x28\x9D\xDE\xFE\x7E\x3E\xE6\xDD\xED\x8E\x95\x5C\xB4\xD8\xA8\xE9\x66\xF2\x17\x20\x86\x39\xE6\x8F\x1B\x87\xB5\x73\xD2\x64\x8A\xF4\x62\xB9\x61\x8D\xC8\xDE\xE5\x8D\xFC\x72\xA9\xCF\x6A\x9C\xEC\x5A\xF5\xA4\xDA\xF9\xF8\xEF\x76\x73\xEE\x5F\x2C\x57\x16\xAF\x3D\xD1\xE4\xB5\xA1\x66\xB2\xB8\xDD\xAA\xAE\x93\xB1\xE4\xA6\xD8\xB0\x39\xF8\xA7\x82\x9B\xB2\x28\xD9\x67\x86\x56\x46\xE9\x1D\x03\xDD\xC7\xF2\xB1\x3E\x26\xC8\xA8\xAF\xE5\xC8\xAC\x54\x55\x72\x39\x3B\x60\x6A\x35\x1D\x85\x9F\x39\xA9\x2C\x92\x49\x16\xBD\x94\x92\x8D\x67\x3D\xCA\xE7\x7D\x19\x59\x1C\xF0\x35\x55\x55\x55\x7B\x22\x9A\x36\x72\xBE\x57\xB3\x95\xF7\x29\x60\xA1\xB2\xDD\x82\x86\xF9\xB6\x57\x93\x53\xD5\xB5\xB4\x9A\xDB\x27\xCB\x39\xB0\xCD\x6A\x79\x21\x7C\x0D\x5F\x4F\x95\x73\x23\x46\x4B\x27\x87\xA2\x3D\xCF\x56\x22\x37\xC2\xF3\xA3\xAB\xCB\x67\x25\x67\x37\xB3\xDB\xAD\x35\x49\x33\xF9\x37\xDE\x8E\xBC\xCD\xED\x92\x28\x52\x38\xE1\x85\x1C\xDF\x76\xB9\x62\x86\x37\x39\xAB\xE5\x1C\xE5\x4F\x81\xE3\x5F\xA7\xD6\x67\xB3\xF9\x3C\x34\xDC\x9B\xFA\x95\x7B\x6F\x95\xCF\xE2\xB4\x00\x3A\x8E\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x99\xEA\xBF\xE6\xB7\x6C\xFD\x49\x73\xF7\x0F\x3E\x8F\xD5\x0D\xAF\x6A\xC3\x6C\x5A\xE6\x0F\x59\x9F\x0B\x5B\xEE\x86\x3E\xED\xBB\x13\x64\x68\xCB\x6B\x8F\x41\xF5\x58\xD6\xB5\xAC\x9A\x2E\x39\xFA\x43\x95\x55\x55\x7F\x15\x3C\x1F\x38\xEA\xBF\xE6\xB7\x6C\xFD\x49\x73\xF7\x0F\x3B\x3E\xAD\xFE\x72\xF4\xDF\xD4\x59\x6F\xDF\x63\x8E\x6E\xD5\x22\xF9\xE9\x59\xF0\x76\xB4\x32\x5B\x1E\xAE\x5B\x57\xC6\x1A\xBF\x7D\x7D\x53\xFE\x9D\xD3\x3F\x67\x2C\xFF\x00\x1C\x3E\xFA\xFA\xA7\xFD\x3B\xA6\x7E\xCE\x59\xFE\x38\xF0\x0D\xFD\x4B\x07\xD9\xFD\x65\x27\xF9\x3D\xAF\xB5\xFA\x47\xF4\x95\xAB\xE3\x2D\x62\xE8\x58\x8E\xF5\xC8\x6E\x5B\xB5\x7E\xDD\xE9\xE5\x86\xBA\xC3\x1F\x7D\x89\xDF\x33\x91\xAC\x57\xBD\x51\xA8\xB2\x2A\x27\x2E\x55\xE1\x3D\xCF\x1E\xB4\xD1\xFF\x00\xE1\x63\x37\x5A\x17\x2B\x3E\xE8\x6C\x57\xB1\x92\xAA\x2F\x0B\xE9\x5A\xCE\xC9\x5E\x4E\x17\xE7\xD9\x2B\x8B\x04\x45\xFF\x00\xD3\x34\xFF\x00\xDF\x6F\xFF\x00\x4C\x86\x1B\xB5\x88\xAD\x2B\x1E\x1C\xAB\xF4\x5E\x4B\x5A\xF9\x2F\x3E\x3C\x72\xB3\x14\x6C\x8A\x26\x45\x13\x1A\xC8\xD8\xD4\x6B\x5A\xD4\xE1\x1A\x89\xEC\x88\x46\xDB\xF1\xDA\xD5\x9A\x3F\x74\x36\x68\xEA\x36\xAD\x26\xB9\xDE\xBD\x99\x3D\x36\xC4\x8E\xE3\x9E\x5D\xCA\x70\x8B\xC3\x7F\xE0\x85\xB3\x16\x91\x89\xAB\xB1\xF5\x79\x63\xCA\x42\xC9\xEA\x6B\x78\xD8\x32\x35\xA0\x7F\x96\x3A\xD5\x89\x26\x8D\x92\xAB\x7D\x95\xD1\xB6\xBB\xFB\x7E\x4B\x2A\xAF\xBA\x22\x95\x6C\xE4\x8C\x78\xE6\x66\x39\x41\xA5\x86\xD9\xB3\x45\x62\x78\xF6\xA1\x6B\x51\xE4\x1B\x8E\x64\x1A\x67\x4E\x36\x4B\x58\xE7\x2A\xBD\x92\xFA\x11\x51\x8D\xCA\xE5\xE5\x5D\xC5\xB9\x23\x7B\xB9\xF7\xE5\x1A\xA8\xBF\x0E\x4A\x39\x4C\x5E\xFB\x05\x29\x6C\x65\xA2\xD4\x35\x2C\x72\x35\x7B\xEF\xE5\x73\x2B\x23\xA0\x6F\x1E\x5C\xB1\x36\x36\xB1\xDC\x7C\xBD\x66\xA7\xDA\x49\xC7\xDE\xCC\xF5\x1B\x17\x5F\x68\xCF\xEC\x19\x98\x68\xE4\xA3\xFA\x45\x2C\x4E\x3E\xFC\x94\xEB\xD6\x81\xFE\x58\xC7\xAC\x2A\xD7\xCC\xFE\xDE\xDE\xE5\x7B\x95\x3B\xB9\xED\x46\xA7\x83\xF1\x75\x0D\x17\x08\xD9\xB3\x4F\xD7\xB0\xB5\xDF\x59\x8E\x9E\x4B\xB3\x57\x62\xBD\x88\xD4\xE5\x5E\xB2\x39\x15\x53\x84\xE7\xCF\x24\xD5\xAE\xCD\xEB\xCF\x54\x56\x16\xDE\xFA\x58\xEF\x31\x15\x9B\x4F\xB6\x7C\xFD\xFD\x8E\x93\xA8\x34\x31\x98\xBD\x2F\xA4\x18\xCC\x25\xEF\xBA\x18\xBA\x99\x08\x20\xA5\x6F\xBD\xAE\xF5\xE1\x66\x26\xDB\x63\x93\x96\xF8\x5E\xE6\xA2\x2F\x29\xE3\xCF\x82\x46\xE5\xFC\xCF\x13\xFD\xE2\xC3\x7F\x99\x56\x32\xE6\x2B\xD8\xA7\xD2\x4E\x85\xD4\xB5\x0C\x90\x58\x81\xF4\xE3\x96\x29\x1A\xAD\x73\x1E\xDC\x35\x94\x56\xAA\x2F\x94\x54\x54\xE3\x83\x16\xE5\xFC\xCF\x13\xFD\xE2\xC3\x7F\x99\x56\x33\xD5\xFA\x2D\xFF\x00\x1F\xD9\xBE\xFF\x00\xD3\xB1\x7E\x1F\xBA\xD6\xFC\x9E\xA7\x5D\xAF\xAB\xD5\x5D\xE8\x6B\x14\x3D\x24\x55\xF0\xCF\x52\xD5\xDE\xFE\x3E\x5D\xDE\x94\x7C\xFC\xFB\x53\xE4\x79\x9D\x11\x60\x91\x15\x39\x45\x6A\xA2\xA7\xF8\x1E\xF7\xBF\xCF\xA6\x57\xFB\xB3\x8C\xFF\x00\xE5\x64\x0F\x33\x7E\x49\xFF\x00\xD9\x52\xAD\x1F\x98\x8F\xC7\xF7\x41\xE9\x3F\xA5\x5B\xF0\xFD\xA1\x16\xD7\x32\xF4\x23\xA1\x90\x3D\xCA\xB1\x49\x26\x3B\xD4\x6F\x3E\x1D\xD9\x89\xB3\x23\x79\xF9\xF0\xF6\x31\xC9\xF6\xB5\x17\xE0\x5C\x22\x4B\xF9\x90\xE8\x4F\xFE\xE5\x1F\xF2\x5B\x65\xB3\x2F\x47\x7C\xD4\xFD\xFF\x00\xD2\x8F\x4D\x7C\xF5\x7E\xEF\xE6\x50\x20\xF1\xD1\x5E\xBC\xB5\x3C\x27\x7D\xD5\xE3\xED\x5C\x35\x53\xC7\x51\xA2\xFA\x5E\xA9\x26\x2D\x53\x98\xF2\xB6\xEA\x62\xE5\xF3\xC7\xF2\x76\xAC\xC5\x5D\xFF\x00\xE3\xDB\x2B\x8C\x90\xFE\x65\xFA\xF3\xFD\xAB\x9F\xE4\xD5\x4C\x5D\x48\x99\x69\xEA\x53\x65\x7C\xF6\x62\xAD\x54\xCA\x48\x88\x9C\xAA\xB2\xAD\x98\xAC\x3D\x13\xED\xED\x89\x4C\xB0\xF3\xF1\xDC\x7B\x7F\x96\xDB\x1C\x71\xAD\xCF\xB3\xFD\x5D\xC7\x52\x74\xCD\xD7\x27\xD4\x5A\xBB\x06\x02\xB6\xBF\x73\x1F\x57\x10\x94\xAB\xC3\x7F\x25\x2D\x57\xD7\x91\xD2\xB9\xF3\x39\xA8\xCA\xF2\xA2\xA3\xDA\xDA\xE9\xEE\x8A\x9E\x9A\xF8\xF2\x4D\xFB\xD4\xEA\x9F\xF4\x16\x99\xFB\x47\x67\xF8\x13\x5B\xAB\x6C\xB5\x3F\x57\x29\x47\x67\x37\x9E\xAB\x8A\xC8\xE0\x98\xB8\xE6\x63\xF3\x76\xA9\xC4\xF9\xE1\x9A\x55\x9D\x78\x82\x46\x23\x9C\xB1\xCD\x02\xA2\xAF\x2A\xA8\xC5\xE3\xC3\x54\x9B\xF7\xBF\x1F\xF5\x87\x73\xFD\xAD\xC9\xFF\x00\x10\x78\xD6\xA6\xC4\xE3\xE7\x1D\xA2\x23\xDF\xD8\xD3\x77\x26\x9D\x73\x4C\x66\xA4\xCC\xFB\xFB\x5D\x26\xA1\xA5\x6F\x95\xBA\x93\x87\xD9\x32\xF4\xB5\xAA\x35\xA9\x56\xB3\x5A\xC3\xA9\x65\xA7\xB3\x2C\xB1\x4A\xD6\xAF\x62\x35\xD5\xA3\x6F\x1E\xA4\x71\x3B\x95\x77\x8E\xD5\xE3\xDC\xE7\xB1\xB0\xA5\x3D\xCF\x7A\xC7\x46\xD4\x6C\x35\xF6\x29\x1F\x1B\x53\xE1\xEB\xD7\x82\xCB\xFF\x00\xE2\xF9\xDE\xBF\xE2\x47\xC8\xD5\x9A\x2C\xCC\x18\x6C\x52\xF5\x23\x3D\x91\x96\xBB\xED\x3A\xBE\x3F\x6D\xBB\xDD\x14\x4D\x73\x5B\xDE\xF5\x96\xE3\x11\x11\x5C\xE4\x44\xF2\xAA\xBC\x3B\x84\xFA\xAB\xC6\xCF\x4F\x9D\x42\x6C\x5D\xDB\xB4\xA9\xE6\x2A\xCB\x63\x21\x3B\x6E\xA6\x56\xEB\xAD\x59\x75\x88\x55\x2B\xBD\x5D\x23\xA5\x93\xBB\x8F\x45\x1A\x9C\x3D\x53\x86\xA7\x06\xB8\x31\xDE\x33\xCC\xDE\xD1\x33\xE7\xEF\xC3\x0D\xBC\xD8\xE7\x52\x2B\x8E\x93\x15\xE7\xBB\x9F\xFB\x2E\x90\x03\xC4\xE8\xF5\x82\x44\x89\xDD\xB2\x2B\x57\xB5\x7E\x4B\xC7\x83\xA4\xE2\xBD\x92\x69\x33\x6C\xC1\x6D\x59\x4C\xF6\xB1\x96\xC2\x40\xB9\x3A\x95\x6B\x4F\x06\x47\x17\x2D\x9E\x3D\x07\x4C\xE6\xB9\xAE\x65\x88\xF8\xE7\xD7\x77\x28\xA8\xBE\xC8\x44\xA1\x4F\x37\x43\xA7\x7A\x06\xF9\x63\x70\xCC\x64\xA2\xCB\xCB\x56\x2C\xD5\x6B\x35\xEA\x32\x08\x1D\x3D\x77\xB7\x84\xF4\xE1\x6B\xDB\xC5\xA5\x89\x89\xCB\x97\xDF\x85\xE4\xEC\x49\xA9\x7C\x7B\x54\xF0\xEE\x5D\x93\x1E\x7D\x0C\x91\xC4\xF7\xCC\x79\x7F\xEC\x34\xAD\xE4\x60\xDD\xF2\x98\xAD\x47\xAA\x98\x5A\x70\xDA\x9A\x65\x5C\x16\x7B\x0D\x62\x48\x91\x96\xD1\x8E\x72\xB5\x1A\xEE\x5D\x04\x8A\xD6\xB9\x5A\x8A\xE9\x18\xFE\xD5\x45\xF3\xC3\x5D\xAD\x84\x5C\xA5\x0C\xA6\x5B\x57\xCE\xD8\x6D\xAC\x9E\x1A\x76\xC6\xB6\x92\x34\x67\xD3\x20\x7B\x51\xF0\xCF\xDA\x9E\x11\x55\xAA\xAD\x77\x1E\x3B\xD8\xFE\x38\x4E\x10\xC7\xB3\x31\xD6\x2F\xEB\x14\xE0\x6A\xBE\xD4\xDB\x2E\x31\xD0\xB1\x3D\xD5\x22\xB4\xC9\xA5\x54\xFD\x10\xC5\x2B\x97\xEC\x6A\x95\x36\xB9\x23\x9B\xAE\x5B\x2B\xE1\x44\x56\xC3\x86\xC5\xD7\x95\xC9\xF0\x95\x1F\x6E\x45\x6A\xFD\xA8\xC9\x63\x5F\xD0\xE4\x26\xC7\x5E\xC7\x67\xA2\x93\xDD\x2B\x73\x5E\x76\x74\x67\x2E\x48\xF8\x51\x3E\x3F\x93\x30\x00\xE9\xB8\x60\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0E\x67\xAA\xFF\x00\x9A\xDD\xB3\xF5\x25\xCF\xDC\x3C\xB3\xBA\x6D\xBA\xAE\xD1\xD4\xDD\x59\xBA\xD6\xC9\x87\xCD\x2D\x4C\x16\x51\x2C\x7D\x02\xEC\x73\xFA\x5D\xD3\x63\xFB\x7B\xBB\x15\x78\xE7\xB5\xDC\x73\xEF\xC2\xFC\x8D\xD0\x4F\x93\x07\x5E\x4A\xDF\x9F\x05\x98\x76\xBB\x3C\x37\xC5\xC7\xCA\x00\x05\x08\xC3\x8A\x76\xDB\xAA\xA7\x43\xE6\xD5\x57\x64\xC3\xFD\xDF\x5D\xD9\x55\x31\x9F\x4D\x8F\xE9\x5F\xF9\x8D\x24\xFC\x97\x3D\xDF\x89\xF5\xBD\xBD\xBC\xFB\x1D\xA8\x27\xCF\x83\xB5\xE3\xBF\x8E\x16\x6A\x6D\xFA\xBF\x57\x77\x3C\xC7\x01\x32\x0C\xC3\xF4\xAD\xE2\x0D\xC1\xF5\xAC\x58\xC4\x58\xA6\xB8\xFC\xCB\x6B\xC4\xE9\x25\x86\x36\xB9\x64\x86\xC2\x31\xA8\xAE\x7A\x46\xE7\x48\x8E\x6B\x51\x57\xB6\x55\x72\x73\xDB\xC2\xD3\x07\xBC\xD8\xA3\x2D\x26\xB2\xCB\x5F\x3D\xB0\x64\x8B\xD5\xE6\x86\x8D\x47\x23\x1B\xF2\x7D\x31\xEA\x5E\x22\x3C\x15\x89\x1F\x2B\x6A\xCD\x51\x99\x1A\xF5\xD5\xCA\xAA\xE6\xC2\xE8\xE6\x89\xCC\x67\x2A\xBF\x51\xCA\xEE\xDF\x66\xF6\xA2\x70\x73\x39\x96\xE0\x28\x64\x92\x9D\xAD\x81\xBD\x4B\xD9\x6B\xC8\xD7\xC5\x85\xA3\x13\x2B\xE2\xA9\xCA\x8B\xCB\x25\xB7\xDA\xE9\x15\xA8\xD5\xE1\x7B\x64\x91\xEA\xAA\x9C\xB2\x35\x54\xE5\x37\x32\x7A\x76\xA3\x93\xB6\xEB\x99\x2D\x57\x07\x76\xCB\xFF\x00\x1A\x6B\x18\xF8\xA4\x7A\xFE\x97\x39\xAA\xA5\x4C\x7D\x2A\x78\xEA\x8C\xA9\x8F\xA9\x5E\xA5\x68\xD3\x86\x43\x04\x68\xC6\x35\x3E\x48\xD4\xF0\x84\x75\xD3\xC9\x3F\x06\xD7\xF8\x2E\x95\xBD\x25\x86\x27\xAE\x98\xE3\xAB\xEB\x50\xA7\x33\x7A\xB3\xA0\xE3\x9B\x6F\x3F\x47\x0F\xB7\xEB\xB9\x17\x49\x67\x88\x51\xEC\x82\xD4\x6D\x96\x17\x2B\xE0\x57\xA3\x96\x29\x23\x91\xCE\x6F\xD7\x4F\x0F\x6A\xA3\xBC\x1F\x39\x9B\x3A\xFB\x1A\x26\x37\x33\x9E\xBB\x8F\x8D\x2A\xED\x14\x99\x66\xDB\x13\xD0\xAE\x91\xC1\x99\x8E\x35\x97\xEB\x39\xDD\x8D\xED\x8F\xB9\x79\x72\xA2\x79\xF2\x74\xF9\xAD\x63\x5A\xCD\xD8\x65\x8C\xD6\xBD\x88\xC9\x4C\xC6\xF6\xB6\x4B\x74\xA3\x99\xCD\x6F\xC9\x15\xC8\xAA\x88\x53\xAB\x5E\x0A\xB5\xD9\x5E\xAC\x11\xC1\x0C\x69\xDA\xC8\xE3\x6A\x35\xAD\x4F\x92\x22\x78\x43\xD6\x2D\x4B\x63\x8B\x57\xAB\xBA\x79\x67\x9F\xD2\x34\xCB\x34\xBF\x47\xC2\xAC\xC4\xFE\x5E\x49\xF9\x5D\x8F\x5F\xD9\xFA\xCD\x98\xBF\xAD\xE7\x31\xB9\x9A\x91\xEB\xD8\xD8\x5F\x3D\x1B\x4C\x9E\x36\xC8\x96\x2F\xAA\xB5\x5C\xC5\x54\x45\xE1\xCD\x5E\x3E\x4A\x9F\x32\x94\xDF\x92\x7F\xF6\x54\xF4\x0A\x70\x62\xEC\xA9\x14\xE7\x9E\x11\x6D\x67\xED\xF2\xCE\x4E\x38\xE5\xC5\x63\xF6\xDD\x57\x2B\xD2\xEE\x8A\x60\x31\x7B\x26\x1E\xF6\x5E\x93\xEA\x2D\xAA\x35\xEE\xC7\x24\xF0\x76\x62\x2D\x35\xDD\xEC\x6A\xAB\x9B\xC3\x95\x1A\xBC\xA7\x85\x54\x45\x3B\x50\x0F\x3A\xD8\x3B\x0A\xF4\xF3\xCB\x4D\xDD\xBF\x5A\xBC\x5F\x8E\x3B\xB8\x70\xF7\xF6\xCD\x5B\x13\xD3\x3E\xB6\xE0\xB2\x9B\x26\x1E\x8E\x5A\xEB\xAD\x7D\x16\x8D\x8B\xB1\xC7\x3C\xFD\xD8\x8A\xCD\x6F\x63\x1C\xA8\xE7\x72\xE4\x56\xA7\x09\xE5\x51\x51\x3C\x9D\xAC\xD1\xC7\x34\x2F\x86\x56\x35\xF1\xBD\xAA\xD7\xB5\xC9\xCA\x39\x17\xC2\xA2\x9E\xC0\xC3\x83\xB3\xB5\xAD\xCF\x3C\x9B\x1B\x7D\xB5\x29\x4E\x38\xE9\x8E\x3F\x6F\xE9\x07\x1F\x92\xD6\xEA\xEA\xB5\xFA\x79\xD5\x29\x65\xA9\x8B\xA1\x2B\x57\x5F\xD9\x3D\x47\x44\xD8\x1A\xDE\x52\x16\xBE\x74\xFE\x6F\x3C\x6D\x5F\x4D\x1E\xF5\x46\xCA\xDF\x0A\xAA\xAE\x73\x0E\x86\x2E\x9F\xEC\x6E\xAD\xEB\xE3\xFA\xAB\x85\xB1\x8C\x54\x45\x8E\xC5\x9C\x23\x65\x99\x59\xF3\x59\x63\xB0\xC8\xD5\x7E\xD4\x8D\x13\xEC\x31\xBD\xAD\x7B\x55\xAE\x6A\x39\xAA\x9C\x2A\x2A\x72\x8A\x87\x3B\x2E\x87\xA3\x4B\x33\xA6\x97\x4C\xD7\x1F\x23\x9C\xAE\x73\xDD\x8B\x85\x5C\xAB\xF3\x55\xED\xF7\x27\x9D\x2B\x56\x66\x71\x5B\x88\x95\x95\xF4\x96\x3B\xD6\x23\x3D\x3A\xA6\x3C\xD4\x60\xCF\xEB\xDA\xBD\x1C\x8E\x07\xA6\x99\x67\x6D\x9B\x86\x4B\x86\x64\x73\xF2\x2B\x67\x86\xA2\xB7\x94\x47\x4D\x24\x68\x91\x27\xA7\xCB\xBB\x2B\x47\xC2\xF2\xBC\xAA\x27\x73\xDE\x64\xC0\x62\xEB\x61\x70\xB5\x31\x55\x16\x47\x43\x56\x24\x8D\x1F\x23\xBB\x9E\xF5\x4F\x77\x39\x7E\x2E\x55\xE5\x55\x7E\x2A\xAA\x6D\x57\x86\x1A\xF0\xB2\x0A\xF1\x47\x0C\x4C\x4E\x1A\xC6\x35\x1A\xD6\xA7\xC9\x11\x3D\x8C\x86\xDA\xFA\xD1\x87\x99\xE7\x99\x94\xBB\x9B\xB6\xD9\xE2\x38\xE2\xB1\xE1\x00\x00\xA9\x0A\x2E\x17\x29\x84\xD5\xF1\x79\xAD\x33\x7A\xA6\xEB\x1A\x26\x66\x69\xA6\x86\xD7\xA6\xE7\x47\x41\xD3\x39\x5F\x34\x33\xAB\x3E\xB4\x6C\x59\x15\xD2\xB2\x6F\x08\xC5\x7A\xA2\xAB\x3B\x58\xAB\x63\x17\xA2\x64\x6D\xD4\x64\xFA\x7F\x56\xB1\x39\x1C\x3A\xB5\x16\x09\x6F\x63\x9B\x90\x93\xB7\xE1\xFC\xBC\x36\x22\x47\xA7\x1F\x15\x6A\xAF\xCD\x55\x7C\x9E\x88\x17\xB4\x9D\x32\xF5\xA7\xDA\xBD\xA8\xE0\x2D\x4E\xF5\xE5\xF2\xCD\x8E\x85\xEF\x77\xE9\x55\x6F\x2A\x73\xEF\xA7\x68\xB4\xDB\x15\xB8\xE5\xD6\xC7\xE9\x2A\x5B\x1C\x53\x3D\x3A\xB8\x53\x82\xDE\x9D\xA1\x67\x1F\x92\xB3\x9F\x93\x7F\xDF\x99\x03\xAB\xD4\xA1\x47\xB1\x12\xAA\x3F\x85\x72\x36\x26\xAA\xB6\xB3\x1D\xC2\x77\x4B\x33\x95\xDC\x27\x08\xE5\xF0\xD5\xD6\xD6\xE8\xDE\xAD\x15\xBB\xF9\x99\xE3\xB1\x9A\xCA\x59\x75\xDC\x8C\xB1\x73\xD8\xB2\xB9\x11\xA8\xC6\x73\xE7\xB1\x8C\x6B\x23\x6F\x3E\x7B\x58\x8A\xBE\x55\x4D\xBC\x5E\x37\x1D\x8A\xA8\xDA\x98\xBA\x15\x68\xD7\x6F\xE2\xC5\x5A\x16\xC6\xC4\xFD\x08\xD4\x44\x36\x8D\x75\xF5\x7B\x39\x9B\xDA\x79\x96\x3B\x7B\xDD\xBD\x63\x1D\x2B\xD3\x58\xF2\x00\x05\x6E\x78\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\xFF\xD9'\

def set_pgm(long_id, short_id, number, state):
    packet = prutils.make_device_packet(long_id, short_id, Config.SET, 71, chr(number) + chr(state))
    return packet

def set_x10(long_id, short_id, number, state):
    packet = prutils.make_device_packet(long_id, short_id, Config.SET, 72, chr(number) + chr(state))
    return packet

def passive_motion(long_id, short_id):
    packet = prutils.make_device_packet(long_id, short_id, Config.REPORT, 1, chr(Config.VIOLATED))
    return packet


def passive_occupation(long_id, short_id):
    packet = prutils.make_device_packet(long_id, short_id, Config.REPORT, 3, chr(Config.VIOLATED))
    return packet


def active_barrier(long_id, short_id):
    packet = prutils.make_device_packet(long_id, short_id, Config.REPORT, 4, chr(Config.VIOLATED))
    return packet

def glass_break(long_id, short_id):
    packet = prutils.make_device_packet(long_id, short_id, Config.REPORT, 6, chr(Config.VIOLATED))
    return packet

def switch_magnetic(long_id, short_id, open):
    packet = prutils.make_device_packet(long_id, short_id, Config.REPORT, 8, chr(open))
    return packet


def smoke(long_id, short_id, open):
    packet = prutils.make_device_packet(long_id, short_id, Config.REPORT, 9, chr(open))
    return packet

def heat_sensor(long_id, short_id, open):
    packet = prutils.make_device_packet(long_id, short_id, Config.REPORT, 10, chr(open))
    return packet

def co(long_id, short_id, open):
    packet = prutils.make_device_packet(long_id, short_id, Config.REPORT, 11, chr(open))
    return packet

def gas(long_id, short_id, open):
    packet = prutils.make_device_packet(long_id, short_id, Config.REPORT, 13, chr(open))
    return packet

def flood(long_id, short_id, open):
    packet = prutils.make_device_packet(long_id, short_id, Config.REPORT, 16, chr(open))
    return packet

def aux(long_id, short_id, open):
    bMask = 0xFF * open #Open all 8 auxilary inputs, according to mask 0b11111111 = 0xFF
    packet = prutils.make_device_packet(long_id, short_id, Config.REPORT, 17, chr(bMask))
    return packet

def passive_motion_with_index(long_id, short_id, index):
    packet = prutils.make_device_packet(long_id, short_id, Config.REPORT, 19, chr(Config.VIOLATED) + chr(index))
    return packet

def passive_motion_with_index_and_timer(long_id, short_id, index, timer):
    packet = prutils.make_device_packet_multitldv(long_id, short_id, Config.REPORT, \
                [{19 : chr(Config.VIOLATED) + chr(index) }, {5: chr(timer)}])
    return packet

def temperature(long_id, short_id, temperature):
    temperature = int(((temperature + 40.0) * 2) + 1)
    packet = prutils.make_device_packet(long_id, short_id, Config.REPORT, 24, chr(temperature))
    return packet

def panic_alarm(long_id, short_id, open):
    packet = prutils.make_device_packet(long_id, short_id, Config.REPORT, 33, chr(open))
    return packet

def fire_alarm(long_id, short_id, open):
    packet = prutils.make_device_packet(long_id, short_id, Config.REPORT, 34, chr(open))
    return packet

def emergency(long_id, short_id, open):
    packet = prutils.make_device_packet(long_id, short_id, Config.REPORT, 35, chr(open))
    return packet

def tamper(long_id, short_id, open):
    packet = prutils.make_device_packet(long_id, short_id, Config.REPORT, 39, chr(open))
    return packet

def low_battery(long_id, short_id, open):
    packet = prutils.make_device_packet(long_id, short_id, Config.REPORT, 40, chr(open))
    return packet

def ac_fail(long_id, short_id, open):
    packet = prutils.make_device_packet(long_id, short_id, Config.REPORT, 41, chr(open))
    return packet

def masking(long_id, short_id, open):
    packet = prutils.make_device_packet(long_id, short_id, Config.REPORT, 44, chr(open))
    return packet

def heat_trouble(long_id, short_id, open):
    packet = prutils.make_device_packet(long_id, short_id, Config.REPORT, 45, chr(open))
    return packet

def smoke_trouble(long_id, short_id, open):
    packet = prutils.make_device_packet(long_id, short_id, Config.REPORT, 46, chr(open))
    return packet

def jamming(long_id, short_id, open):
    packet = prutils.make_device_packet(long_id, short_id, Config.REPORT, 48, chr(open))
    return packet

def probe_disconnected(long_id, short_id, open):
    packet = prutils.make_device_packet(long_id, short_id, Config.REPORT, 50, chr(open))
    return packet

def co_sensor_trouble(long_id, short_id, open):
    packet = prutils.make_device_packet(long_id, short_id, Config.REPORT, 51, chr(open))
    return packet

def gas_sensor_trouble(long_id, short_id, open):
    packet = prutils.make_device_packet(long_id, short_id, Config.REPORT, 52, chr(open))
    return packet

def change_listen_mode(long_id, short_id, mode, timeout_sec):
    # mode:
    #   0   - Notification Only
    #   1   - Always Open
    #   255 - Default

    # timeout_sec need to be 2 bytes length
    timeout_sec = prutils.num_to_chars(timeout_sec, 2)
    packet = prutils.make_device_packet(long_id, short_id, Config.REPORT, 61, chr(mode) + timeout_sec)
    return packet


def change_notification_period(long_id, short_id, mode, timeout_sec):
    # mode:
    #   0   - 1 second
    #   1   - 2 seconds
    #   2   - 4 seconds
    #   3   - 8 seconds
    #   4   - 16 seconds
    #   5   - 32 seconds
    #   6   - 64 seconds
    #   255 - Default

    # timeout_sec need to be 2 bytes length
    timeout_sec = prutils.num_to_chars(timeout_sec, 2)
    packet = prutils.make_device_packet(long_id, short_id, Config.REPORT, 62, chr(mode) + timeout_sec)
    return packet


def change_transmission_privileges(long_id, short_id, restricted_bitmap, timeout_sec):
    # restricted_bitmap - bitmap of restricted slots (8 bytes):
    #   0   - not restricted
    #   1   - slot is restricted for transmission

    # timeout_sec need to be 2 bytes length
    timeout_sec = prutils.num_to_chars(timeout_sec, 2)
    packet = prutils.make_device_packet(long_id, short_id, Config.REPORT, 63, restricted_bitmap + timeout_sec)
    return packet


def hello(long_id, short_id, command, notification_period):
    # command:
    #   0 - Ping
    #   1 - Check if enrolled

    packet = prutils.make_device_packet(long_id, short_id, Config.REPORT, 64, chr(command), notification_period)
    return packet


#class PanelKeypad(device):
def change_panel_state(long_id, short_id, part_bitmap, action, user_code):
    # part_bitmap - Partition (bitmap):
    #   0 - no Partition
    # action:
    #   1 - Disarm
    #   2 - Arm Home
    #   3 - Arm Away
    #   4 - Arm Latchkey
    #   5 - Arm Part
    #   6 - Quick Away
    #   7 - Quick Home
    #   8 - Arm Instant
    #   9 - Check Code
    # user_code - 4 digits user code:
    #   1st digit sent 1st, example - user code 1234: code byte 0: 0x12, code byte 1: 0x34
    #   0xAAAA - no user code

    user_code = prutils.str_to_bcd(str(user_code))
    packet = prutils.make_device_packet(long_id, short_id, Config.REPORT, 69, chr(part_bitmap) + chr(action) + user_code)
    return packet

def prox(long_id, short_id, tag_id = 0, action = 3, partition_bitmap = 0):
    '''action_id = 3
    if action.lower() == "away":
        action_id = 3
    elif action.lower() == "home":
        action_id = 2
    elif action.lower() == "disarm":
        action_id = 1
    elif action.lower() == "away_latchkey":
        action_id = 4
    elif action.lower() == "arm_part":
        action_id = 5
    elif action.lower() == "quick_away":
        action_id = 6
    elif action.lower() == "quick_home":
        action_id = 7
    elif action.lower() == "arm_instant":
        action_id = 8
    elif action.lower() == "check_code":
        action_id = 9
    else:
        print "Wrong event was specified for TAG"
        sys.exit(0)
    '''
    packet = prutils.make_device_packet(long_id, short_id, Config.SET, 73, chr(partition_bitmap) + chr(action) + '\x28\x00\x00\x00\x00' + chr(tag_id) + '\x00\x00\x00')
    return packet

def aux_simple(long_id, short_id, open):
    packet = prutils.make_device_packet(long_id, short_id, Config.SET, 74, chr(open))
    return packet

def volume(long_id, short_id, level):
    # level:
    #   1   - lowest level
    #   254 - highest level

    packet = prutils.make_device_packet(long_id, short_id, Config.REPORT, 96, chr(level))
    return packet


def supervision(long_id, short_id, open):
    packet = prutils.make_device_packet(long_id, short_id, Config.REPORT, 116, chr(open))
    return packet

def partition(long_id, short_id, partition_bitmap = 0):
    packet = prutils.make_device_packet(long_id, short_id, Config.SET, 118, chr(partition_bitmap))
    return packet

def show_locally_link_quality(long_id, short_id, enable):
    action = Config.ENABLE
    if (enable == 0):
        action = Config.DISABLE
    packet = prutils.make_device_packet(long_id, short_id, Config.REPORT, 142, chr(action))
    return packet


def device_type(long_id, short_id, type, subtype):
    packet = prutils.make_device_packet(long_id, short_id, Config.REPORT, 237, chr(type) + chr(subtype))
    return packet


def power_mode(long_id, short_id, mode):
    # mode:
    #   0 - Power Save
    #   1 - Active

    packet = prutils.make_device_packet(long_id, short_id, Config.REPORT, 238, chr(mode))
    return packet


def clear_alarm_memory(long_id, short_id):
    packet = prutils.make_device_packet(long_id, short_id, Config.REPORT, 239, chr(Config.NO_VALUE))
    return packet


def update(long_id, short_id):
    packet = prutils.make_device_packet(long_id, short_id, Config.REPORT, 253, chr(Config.NO_VALUE))
    return packet


def enroll(long_id, dev_type, customer_mid = 0, customer_did = 0):

    serial_num = prutils.convert_longid(long_id)
    rssi = '\x32'
    tx_power = '\x01'
    association_request_data= '\x00'
    #TODO: Get device type
    if (dev_type.upper() in _DeviceType):
        dev_type = _DeviceType[dev_type.upper()]
    else:
        raise Exception("Incorrect device type specified")
        return None

    attached_device_information= '\x00' + dev_type + '\x01\x14\x03\x00\x00'
    #Counting customer id
    manufacturing_information = chr(customer_mid) + prutils.num_to_chars(customer_did, 2, 0)
    rf_module_information='\x00\x70\x09\x28\x03\x08\x01'
    packet = serial_num + rssi + tx_power + association_request_data + '\x00' + prutils.str_l(attached_device_information) + '\x01' + prutils.str_l(manufacturing_information)+ '\x02' + prutils.str_l(rf_module_information)
    host_protocol_message = prutils.make_host_packet(0x41, packet, False)
    enroll_packet = '\x01' + host_protocol_message
    enroll_packet = prutils._make_f2_packet(enroll_packet, 13)
    return enroll_packet
# TODO : add F0 parser to serial_port
def enroll_F0(long_id, dev_type, zone_num, customer_mid=0, customer_did=0):
    long_id = prutils.num_to_chars(long_id)
    if (dev_type.upper() in _DeviceType):
        dev_type = _DeviceType[dev_type.upper()]
    else:
        raise Exception("Incorrect device type specified")
        return None
    # "32 01 00 [] 00 08 00 " $ iDeviceTypeNumber $ " " $ iDeviceSubTypeNumber $ " 01 14 03 00 00 01 03 00 00 00 02 07 00 70 09 28 03 08 01 C7 0A"     
    rssi = '\x32'
    tx_power = '\x01'
    association_request_data = '\x00'
    attached_device_information = dev_type + '\x01\x14\x03\x00\x00'
    attached_device_information = '\x00' + chr(len(attached_device_information))
    manufacturing_information = '\x01\x03' + chr(customer_mid) + prutils.num_to_chars(customer_did, 2, 0)
    rf_module_information = '\x02\x07\x00\x70\x09\x28\x03\x08\x01'
    data = '\x01' + chr(zone_num) + '\x22\x41' + long_id + rssi + tx_power + association_request_data + attached_device_information + manufacturing_information + rf_module_information
    packet = prutils.make_f0_packet(0x02, 0x33, data)
    return packet


#TODO: Add all events

def film_info(long_id, short_id, film_id, film_status, film_type, pre_alarm_length, post_alarm_length,\
        frame_rate, time_stamp, index, zone, files_amount):

    # film_status:
    #   0   does not exist
    #   1   existing, closed and permitted for delete
    #   2   existing, opened film
    #   3   existing, closed film
    #   4   error
    # print long_id, short_id, film_id, film_status, film_type, pre_alarm_length, post_alarm_length,\
    #     frame_rate, time_stamp, index, zone, files_amount
    # return
    data = chr(film_id) 
    data += chr(film_status)
    data += chr(film_type)
    data += chr(pre_alarm_length)
    data += chr(post_alarm_length)
    data += chr(frame_rate)
    data += prutils.num_to_chars(time_stamp, 4, 0)
    data += chr(index)
    data += chr(zone)
    data += chr(files_amount)
    packet = prutils.make_device_packet(long_id, short_id, Config.REPORT, 180, data, 0, 1, 1, 1, 0)
    return packet

def file_info(long_id, short_id, film_id, row, file_status,  prime_file_id, secondary_file_id, frame_number, file_type,\
        film_type, time_stamp, crc, index, zone, file_size, sequence=-1):
    
    data = chr(film_id) + chr(row) +  chr(file_status) + chr(prime_file_id) + chr(secondary_file_id) + chr(frame_number) + \
        chr(file_type) + chr(film_type) + prutils.num_to_chars(time_stamp, 4, 0) + prutils.num_to_chars(crc, 2 ,0) + \
        chr(index) + chr(zone) + prutils.num_to_chars(file_size, 2, 0)
    packet  = prutils.make_device_packet(long_id, short_id, Config.REPLY, 181, data, 0, 0, 0, 0, 1, 4, sequence)
    return packet

def file_block(long_id, short_id, data, film_id, row, block, sequence):
    data = chr(film_id) + chr(row) + prutils.num_to_chars(block, 2, 0)+ chr(len(data)) + data
    packet = prutils.make_device_packet_without_type(long_id, short_id, Config.FILE_REPLY, data, 0, 1, 0, 0, 0, 0, 4, sequence)
    return packet

if __name__ == "__main__":
    pass
